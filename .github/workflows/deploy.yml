name: Deploy to AWS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: ap-northeast-1
  NODE_VERSION: '18'

jobs:
  test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run tests
      working-directory: ./frontend
      run: npm test -- --coverage --watchAll=false

    - name: Run linting
      working-directory: ./frontend
      run: npm run lint --if-present

    - name: Build application
      working-directory: ./frontend
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-files
        path: frontend/build/

  deploy-infrastructure:
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.6.0

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Terraform Init
      working-directory: ./terraform
      run: terraform init

    - name: Terraform Plan
      working-directory: ./terraform
      run: terraform plan -var="bucket_name=${{ secrets.S3_BUCKET_NAME }}"

    - name: Terraform Apply
      working-directory: ./terraform
      run: terraform apply -auto-approve -var="bucket_name=${{ secrets.S3_BUCKET_NAME }}"

    - name: Get Terraform outputs
      working-directory: ./terraform
      id: terraform
      run: |
        echo "bucket_name=$(terraform output -raw s3_bucket_name)" >> $GITHUB_OUTPUT
        echo "distribution_id=$(terraform output -raw cloudfront_distribution_id)" >> $GITHUB_OUTPUT

    outputs:
      bucket_name: ${{ steps.terraform.outputs.bucket_name }}
      distribution_id: ${{ steps.terraform.outputs.distribution_id }}

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: [test, deploy-infrastructure]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-files
        path: frontend/build/

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Deploy to S3
      run: |
        aws s3 sync frontend/build/ s3://${{ needs.deploy-infrastructure.outputs.bucket_name }} --delete --cache-control max-age=31536000,public
        aws s3 cp frontend/build/index.html s3://${{ needs.deploy-infrastructure.outputs.bucket_name }}/index.html --cache-control max-age=0,no-cache,no-store,must-revalidate

    - name: Invalidate CloudFront
      run: |
        aws cloudfront create-invalidation \
          --distribution-id ${{ needs.deploy-infrastructure.outputs.distribution_id }} \
          --paths "/*"

    - name: Deployment Summary
      run: |
        echo "üöÄ Deployment completed successfully!"
        echo "üì¶ S3 Bucket: ${{ needs.deploy-infrastructure.outputs.bucket_name }}"
        echo "üåê CloudFront Distribution: ${{ needs.deploy-infrastructure.outputs.distribution_id }}"
        echo "‚úÖ Frontend deployed and cache invalidated"